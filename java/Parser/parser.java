
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Apr 22 10:33:25 CEST 2016
//----------------------------------------------------

package Parser;

import java_cup.runtime.*;
import AST.*;

/** CUP v0.10k generated parser.
  * @version Fri Apr 22 10:33:25 CEST 2016
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\053\000\002\002\004\000\002\003\010\000\002\003" +
    "\005\000\002\003\007\000\002\003\012\000\002\016\004" +
    "\000\002\016\005\000\002\017\004\000\002\004\003\000" +
    "\002\004\005\000\002\007\003\000\002\010\004\000\002" +
    "\010\003\000\002\010\003\000\002\010\004\000\002\014" +
    "\006\000\002\011\005\000\002\012\007\000\002\012\011" +
    "\000\002\012\013\000\002\013\005\000\002\006\003\000" +
    "\002\006\004\000\002\005\003\000\002\005\005\000\002" +
    "\015\003\000\002\015\005\000\002\015\003\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\004\000\002\015\006\000\002\015\003\000" +
    "\002\015\006\000\002\015\003\000\002\015\005\000\002" +
    "\015\005\000\002\015\004\000\002\015\005\000\002\015" +
    "\005\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\034\004\001\002\000\004\044\007\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\020\006\015\012\011\013\021\032\013\035\017\040" +
    "\014\044\012\001\002\000\024\002\ufff5\006\ufff5\010\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\016\ufff5\036\ufff5\044\ufff5\001" +
    "\002\000\024\014\035\015\037\017\041\022\032\032\036" +
    "\041\034\042\030\043\040\044\031\001\002\000\004\005" +
    "\140\001\002\000\004\044\126\001\002\000\004\045\121" +
    "\001\002\000\024\014\035\015\037\017\041\022\032\032" +
    "\036\041\034\042\030\043\040\044\031\001\002\000\004" +
    "\004\103\001\002\000\012\006\015\012\011\013\021\044" +
    "\012\001\002\000\024\002\ufff4\006\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\016\ufff4\036\ufff4\044\ufff4\001\002\000" +
    "\004\032\027\001\002\000\004\004\026\001\002\000\004" +
    "\002\uffff\001\002\000\024\002\uffea\006\uffea\010\uffea\011" +
    "\uffea\012\uffea\013\uffea\016\uffea\036\uffea\044\uffea\001\002" +
    "\000\004\002\ufff7\001\002\000\024\002\ufff3\006\ufff3\010" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\016\ufff3\036\ufff3\044\ufff3" +
    "\001\002\000\024\014\035\015\037\017\041\022\032\032" +
    "\036\041\034\042\030\043\040\044\031\001\002\000\044" +
    "\004\uffdf\006\uffdf\007\uffdf\012\uffdf\013\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf" +
    "\031\uffdf\033\uffdf\035\uffdf\044\uffdf\001\002\000\044\004" +
    "\uffe8\006\uffe8\007\uffe8\012\uffe8\013\uffe8\020\uffe8\021\uffe8" +
    "\022\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\033\uffe8\035\uffe8\044\uffe8\001\002\000\024\014\035" +
    "\015\037\017\041\022\032\032\036\041\034\042\030\043" +
    "\040\044\031\001\002\000\026\020\046\021\050\022\044" +
    "\024\045\025\051\026\043\027\052\030\053\031\047\033" +
    "\075\001\002\000\044\004\uffdd\006\uffdd\007\uffdd\012\uffdd" +
    "\013\uffdd\020\uffdd\021\uffdd\022\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\031\uffdd\033\uffdd\035\uffdd\044\uffdd" +
    "\001\002\000\004\032\072\001\002\000\024\014\035\015" +
    "\037\017\041\022\032\032\036\041\034\042\030\043\040" +
    "\044\031\001\002\000\004\032\065\001\002\000\044\004" +
    "\uffe6\006\uffe6\007\uffe6\012\uffe6\013\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031" +
    "\uffe6\033\uffe6\035\uffe6\044\uffe6\001\002\000\024\014\035" +
    "\015\037\017\041\022\032\032\036\041\034\042\030\043" +
    "\040\044\031\001\002\000\044\004\uffda\006\uffda\007\uffda" +
    "\012\uffda\013\uffda\020\046\021\050\022\044\024\045\025" +
    "\051\026\uffda\027\uffda\030\053\031\047\033\uffda\035\uffda" +
    "\044\uffda\001\002\000\024\014\035\015\037\017\041\022" +
    "\032\032\036\041\034\042\030\043\040\044\031\001\002" +
    "\000\024\014\035\015\037\017\041\022\032\032\036\041" +
    "\034\042\030\043\040\044\031\001\002\000\024\014\035" +
    "\015\037\017\041\022\032\032\036\041\034\042\030\043" +
    "\040\044\031\001\002\000\024\014\035\015\037\017\041" +
    "\022\032\032\036\041\034\042\030\043\040\044\031\001" +
    "\002\000\024\014\035\015\037\017\041\022\032\032\036" +
    "\041\034\042\030\043\040\044\031\001\002\000\024\014" +
    "\035\015\037\017\041\022\032\032\036\041\034\042\030" +
    "\043\040\044\031\001\002\000\024\014\035\015\037\017" +
    "\041\022\032\032\036\041\034\042\030\043\040\044\031" +
    "\001\002\000\024\014\035\015\037\017\041\022\032\032" +
    "\036\041\034\042\030\043\040\044\031\001\002\000\024" +
    "\014\035\015\037\017\041\022\032\032\036\041\034\042" +
    "\030\043\040\044\031\001\002\000\044\004\uffd9\006\uffd9" +
    "\007\uffd9\012\uffd9\013\uffd9\020\046\021\050\022\044\024" +
    "\045\025\051\026\uffd9\027\uffd9\030\053\031\047\033\uffd9" +
    "\035\uffd9\044\uffd9\001\002\000\044\004\uffdc\006\uffdc\007" +
    "\uffdc\012\uffdc\013\uffdc\020\046\021\050\022\044\024\045" +
    "\025\051\026\043\027\052\030\053\031\047\033\uffdc\035" +
    "\uffdc\044\uffdc\001\002\000\044\004\uffe2\006\uffe2\007\uffe2" +
    "\012\uffe2\013\uffe2\020\uffe2\021\uffe2\022\uffe2\024\045\025" +
    "\051\026\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2\035\uffe2" +
    "\044\uffe2\001\002\000\044\004\uffe5\006\uffe5\007\uffe5\012" +
    "\uffe5\013\uffe5\020\uffe5\021\050\022\044\024\045\025\051" +
    "\026\uffe5\027\uffe5\030\uffe5\031\uffe5\033\uffe5\035\uffe5\044" +
    "\uffe5\001\002\000\044\004\uffd7\006\uffd7\007\uffd7\012\uffd7" +
    "\013\uffd7\020\046\021\050\022\044\024\045\025\051\026" +
    "\uffd7\027\uffd7\030\uffd7\031\047\033\uffd7\035\uffd7\044\uffd7" +
    "\001\002\000\044\004\uffd8\006\uffd8\007\uffd8\012\uffd8\013" +
    "\uffd8\020\046\021\050\022\044\024\045\025\051\026\uffd8" +
    "\027\uffd8\030\uffd8\031\047\033\uffd8\035\uffd8\044\uffd8\001" +
    "\002\000\044\004\uffe3\006\uffe3\007\uffe3\012\uffe3\013\uffe3" +
    "\020\uffe3\021\uffe3\022\uffe3\024\045\025\051\026\uffe3\027" +
    "\uffe3\030\uffe3\031\uffe3\033\uffe3\035\uffe3\044\uffe3\001\002" +
    "\000\044\004\uffe4\006\uffe4\007\uffe4\012\uffe4\013\uffe4\020" +
    "\uffe4\021\050\022\044\024\045\025\051\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\033\uffe4\035\uffe4\044\uffe4\001\002\000" +
    "\044\004\uffdb\006\uffdb\007\uffdb\012\uffdb\013\uffdb\020\046" +
    "\021\050\022\044\024\045\025\051\026\043\027\uffdb\030" +
    "\053\031\047\033\uffdb\035\uffdb\044\uffdb\001\002\000\024" +
    "\014\035\015\037\017\041\022\032\032\036\041\034\042" +
    "\030\043\040\044\031\001\002\000\026\020\046\021\050" +
    "\022\044\024\045\025\051\026\043\027\052\030\053\031" +
    "\047\033\067\001\002\000\044\004\uffe0\006\uffe0\007\uffe0" +
    "\012\uffe0\013\uffe0\020\uffe0\021\uffe0\022\uffe0\024\uffe0\025" +
    "\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0\035\uffe0" +
    "\044\uffe0\001\002\000\026\020\046\021\050\022\044\024" +
    "\045\025\051\026\043\027\052\030\053\031\047\033\071" +
    "\001\002\000\044\004\uffe7\006\uffe7\007\uffe7\012\uffe7\013" +
    "\uffe7\020\uffe7\021\uffe7\022\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\033\uffe7\035\uffe7\044\uffe7\001" +
    "\002\000\024\014\035\015\037\017\041\022\032\032\036" +
    "\041\034\042\030\043\040\044\031\001\002\000\026\020" +
    "\046\021\050\022\044\024\045\025\051\026\043\027\052" +
    "\030\053\031\047\033\074\001\002\000\044\004\uffde\006" +
    "\uffde\007\uffde\012\uffde\013\uffde\020\uffde\021\uffde\022\uffde" +
    "\024\uffde\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\033" +
    "\uffde\035\uffde\044\uffde\001\002\000\004\004\ufff2\001\002" +
    "\000\044\004\uffe1\006\uffe1\007\uffe1\012\uffe1\013\uffe1\020" +
    "\uffe1\021\uffe1\022\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1" +
    "\030\uffe1\031\uffe1\033\uffe1\035\uffe1\044\uffe1\001\002\000" +
    "\014\006\015\012\011\013\021\036\101\044\012\001\002" +
    "\000\014\006\uffec\012\uffec\013\uffec\036\uffec\044\uffec\001" +
    "\002\000\024\002\uffe9\006\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\013\uffe9\016\uffe9\036\uffe9\044\uffe9\001\002\000\014\006" +
    "\uffeb\012\uffeb\013\uffeb\036\uffeb\044\uffeb\001\002\000\024" +
    "\002\ufff6\006\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\016" +
    "\ufff6\036\ufff6\044\ufff6\001\002\000\026\007\105\020\046" +
    "\021\050\022\044\024\045\025\051\026\043\027\052\030" +
    "\053\031\047\001\002\000\014\006\015\012\011\013\021" +
    "\035\017\044\012\001\002\000\010\010\110\011\111\016" +
    "\107\001\002\000\014\006\015\012\011\013\021\035\017" +
    "\044\012\001\002\000\014\006\015\012\011\013\021\035" +
    "\017\044\012\001\002\000\024\002\ufff0\006\ufff0\010\ufff0" +
    "\011\ufff0\012\ufff0\013\ufff0\016\ufff0\036\ufff0\044\ufff0\001" +
    "\002\000\004\011\113\001\002\000\024\002\uffef\006\uffef" +
    "\010\uffef\011\uffef\012\uffef\013\uffef\016\uffef\036\uffef\044" +
    "\uffef\001\002\000\004\010\115\001\002\000\014\006\015" +
    "\012\011\013\021\035\017\044\012\001\002\000\004\011" +
    "\117\001\002\000\024\002\uffee\006\uffee\010\uffee\011\uffee" +
    "\012\uffee\013\uffee\016\uffee\036\uffee\044\uffee\001\002\000" +
    "\014\006\015\012\011\013\021\035\017\044\012\001\002" +
    "\000\004\044\126\001\002\000\004\004\123\001\002\000" +
    "\016\006\ufffc\012\ufffc\013\ufffc\035\ufffc\044\ufffc\045\121" +
    "\001\002\000\014\006\ufffb\012\ufffb\013\ufffb\035\ufffb\044" +
    "\ufffb\001\002\000\004\004\ufffa\001\002\000\010\004\ufff9" +
    "\033\ufff9\037\127\001\002\000\004\044\126\001\002\000" +
    "\006\004\ufff8\033\ufff8\001\002\000\004\002\ufffe\001\002" +
    "\000\004\033\133\001\002\000\016\006\015\012\011\013" +
    "\021\035\017\040\134\044\012\001\002\000\004\045\121" +
    "\001\002\000\004\002\000\001\002\000\014\006\015\012" +
    "\011\013\021\035\017\044\012\001\002\000\004\002\ufffd" +
    "\001\002\000\024\014\035\015\037\017\041\022\032\032" +
    "\036\041\034\042\030\043\040\044\031\001\002\000\026" +
    "\004\ufff1\020\046\021\050\022\044\024\045\025\051\026" +
    "\043\027\052\030\053\031\047\001\002\000\036\006\015" +
    "\012\011\013\021\020\046\021\050\022\044\024\045\025" +
    "\051\026\043\027\052\030\053\031\047\035\017\044\012" +
    "\001\002\000\024\002\uffed\006\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\016\uffed\036\uffed\044\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\141\000\004\003\004\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\024\007\022" +
    "\010\023\011\015\012\007\013\017\014\021\001\001\000" +
    "\002\001\001\000\004\015\141\001\001\000\002\001\001" +
    "\000\004\004\131\001\001\000\006\016\117\017\121\001" +
    "\001\000\004\015\103\001\001\000\002\001\001\000\016" +
    "\006\076\010\077\011\015\012\007\013\017\014\021\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\032\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\075\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\067" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\041\001\001\000\002\001\001\000\004\015\063\001\001" +
    "\000\004\015\062\001\001\000\004\015\061\001\001\000" +
    "\004\015\060\001\001\000\004\015\057\001\001\000\004" +
    "\015\056\001\001\000\004\015\055\001\001\000\004\015" +
    "\054\001\001\000\004\015\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\010\101\011\015\012\007\013\017\014\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\105\010\023\011" +
    "\015\012\007\013\017\014\021\001\001\000\002\001\001" +
    "\000\016\005\113\010\023\011\015\012\007\013\017\014" +
    "\021\001\001\000\016\005\111\010\023\011\015\012\007" +
    "\013\017\014\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\005\115" +
    "\010\023\011\015\012\007\013\017\014\021\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\024\007\130" +
    "\010\023\011\015\012\007\013\017\014\021\001\001\000" +
    "\004\004\124\001\001\000\002\001\001\000\006\016\123" +
    "\017\121\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\127\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\005\024\007" +
    "\134\010\023\011\015\012\007\013\017\014\021\001\001" +
    "\000\006\016\135\017\121\001\001\000\002\001\001\000" +
    "\020\005\024\007\136\010\023\011\015\012\007\013\017" +
    "\014\021\001\001\000\002\001\001\000\004\015\140\001" +
    "\001\000\002\001\001\000\016\005\142\010\023\011\015" +
    "\012\007\013\017\014\021\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public void syntax_error(Symbol s) {
  report_error("Error de sintaxis en linea " + s.left, null);
}

public void unrecovered_syntax_error(Symbol s) throws
  java.lang.Exception {
  report_fatal_error("", null);
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Exp ::= Exp MAYORQUE Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp19(e,e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Exp ::= Exp MENORQUE Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp18(e,e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Exp ::= Exp IGUALQUE Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp17(e,e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Exp ::= NOT Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp16(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Exp ::= Exp AND Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp15(e,e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Exp ::= Exp OR Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp14(e,e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Exp ::= CLOG 
            {
              Exp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp13(c); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Exp ::= INT2STR PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Exp12(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Exp ::= CST 
            {
              Exp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp10(c); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Exp ::= STR2INT PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Exp9(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Exp ::= MENOS Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp8(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Exp ::= Exp DIV Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp7(e,e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Exp ::= Exp POR Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp6(e,e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Exp ::= Exp MENOS Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp5(e,e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Exp ::= Exp MAS Exp 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp4(e,e1); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Exp ::= CENT 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp3(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Exp ::= PAREN Exp TESIS 
            {
              Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Exp2(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Exp ::= IDENT 
            {
              Exp RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Exp1(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*Exp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Sent ::= ABRELLAVE LSent CIERRALLAVE 
            {
              Sent RESULT = null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LSent ls = (LSent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new Se2(ls); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Sent ::= SentSimp 
            {
              Sent RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SentSimp s = (SentSimp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new Se1(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*Sent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LSent ::= LSent SentSimp 
            {
              LSent RESULT = null;
		int lsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LSent ls = (LSent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sp1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sp1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SentSimp sp1 = (SentSimp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new LS2(ls,sp1); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*LSent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LSent ::= SentSimp 
            {
              LSent RESULT = null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SentSimp sp = (SentSimp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new LS1(sp); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*LSent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Repet ::= WHILE Exp Sent 
            {
              Repet RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new R1(e,s); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*Repet*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Cond ::= IF Exp THEN Sent THENX Sent ELSE Sent ENDIF 
            {
              Cond RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sent s1 = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sent s2 = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new C3(e,s,s1,s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Cond ::= IF Exp THEN Sent ELSE Sent ENDIF 
            {
              Cond RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Sent s1 = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sent s2 = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new C2(e,s1,s2); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Cond ::= IF Exp THEN Sent ENDIF 
            {
              Cond RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new C1(e,s); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*Cond*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Asign ::= IDENT ASOP Exp 
            {
              Asign RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new A1(i,e); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*Asign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Print ::= PRINT PAREN Exp TESIS 
            {
              Print RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new P1(e); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*Print*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SentSimp ::= Print PC 
            {
              SentSimp RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Print p = (Print)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new SS4(p); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SentSimp ::= Repet 
            {
              SentSimp RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Repet r = (Repet)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new SS3(r); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SentSimp ::= Cond 
            {
              SentSimp RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Cond c = (Cond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new SS2(c); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SentSimp ::= Asign PC 
            {
              SentSimp RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Asign a = (Asign)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new SS1(a); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*SentSimp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Body ::= Sent 
            {
              Body RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Sent s = (Sent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new B1(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*Body*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LVar ::= IDENT COMA LVar 
            {
              LVar RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LVar lv = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new LV2(i,lv); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*LVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LVar ::= IDENT 
            {
              LVar RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new LV1(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*LVar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Decl ::= TIPO LVar 
            {
              Decl RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LVar lv = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new DC1(t,lv); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*Decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VDef ::= Decl PC VDef 
            {
              VDef RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		VDef vd = (VDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new VD2(d,vd); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*VDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VDef ::= Decl PC 
            {
              VDef RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT=new VD1(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*VDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S ::= PROG IDENT PAREN LVar TESIS VARS VDef Body 
            {
              S RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LVar lv = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VDef vd = (VDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new S4(i,lv,vd,b); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= PROG IDENT VARS VDef Body 
            {
              S RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VDef vd = (VDef)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new S3(i,vd,b); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= PROG IDENT Body 
            {
              S RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new S2(i,b); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= PROG IDENT PAREN LVar TESIS Body 
            {
              S RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LVar lv = (LVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Body b = (Body)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		RESULT=new S1(i,lv,b); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*S*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		S start_val = (S)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

