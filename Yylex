package Lexer;

import Errors.LexerException;
import Parser.sym;

%%
%{
private java_cup.runtime.Symbol tok(int k, Object value) {
//  System.out.println("Token: " + k);
  return new java_cup.runtime.Symbol(k, yyline, 0, value); 
}
%}

%public
%cup
%line
%yylexthrow{
LexerException
%yylexthrow} 
%eofval{
{return tok(sym.EOF, null); }
%eofval}

letra= [a-zA-Z]


%%

and		{return tok(sym.AND, null); }
or 		{return tok(sym.OR, null); }
not		{return tok(sym.NOT, null); }
PF2016 		{return tok(sym.PROG, null); }
vars		{return tok(sym.VARS, null); }
while		{return tok(sym.WHILE, null); }
print		{return tok(sym.PRINT, null); }
thenx		{return tok(sym.THENX, null); }
Int2Str		{return tok(sym.INT2STR, null); }
Str2Int		{return tok(sym.STR2INT, null); }
if		{return tok(sym.IF, null); }
then		{return tok(sym.THEN, null); }
else		{return tok(sym.ELSE, null); }
endif		{return tok(sym.ENDIF, null); }
int		{return tok(sym.TIPO, new Integer(0)); }
bool		{return tok(sym.TIPO, new Integer(1)); }
string		{return tok(sym.TIPO, new Integer(2)); }

";" 		{return tok(sym.PC, null); }
":="		{return tok(sym.ASOP, null); }
"+"		{return tok(sym.MAS, null); }
"-" 		{return tok(sym.MENOS, null); }
"*"		{return tok(sym.POR, null); }
"/"		{return tok(sym.DIV, null); }
">"		{return tok(sym.MAYORQUE, null); }
"<"		{return tok(sym.MENORQUE, null); }
"="		{return tok(sym.IGUALQUE, null); }
"{"		{return tok(sym.ABRELLAVE, null); }
"}"		{return tok(sym.CIERRALLAVE, null); }
","		{return tok(sym.COMA, null); }
"("		{return tok(sym.PAREN, null); }
")"		{return tok(sym.TESIS, null); }


[0-9]+  	{return tok(sym.CENT, new Integer(yytext()));}
false		{return tok(sym.CLOG, new Integer(0));}
true		{return tok(sym.CLOG, new Integer(1));}
unk		{return tok(sym.CLOG, new Integer(2));}
{letra}({letra}|[0-9])* {return tok(sym.IDENT, yytext()); }


\"([^\"])*\" {return tok(sym.CST, yytext()); } 


(" "|\n|\t|\r)+	{ }

.		{throw  new LexerException("Error lexico en linea "+yyline);}






